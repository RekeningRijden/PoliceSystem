@model PoliceSystem.Models.Domain.Car
@{
    ViewBag.Title = "Map";
    Layout = "~/Views/Shared/_Layout.cshtml";
    Html.ValidationSummary(true);
}

<h2>Map</h2>
<script src="http://maps.googleapis.com/maps/api/js"></script>
<script>
    var map;
    function initialize() {
        var mapProp = {
            center: new google.maps.LatLng(40.50624820202864, -8.032760983386718),
            zoom: 7,
            mapTypeId: google.maps.MapTypeId.ROADMAP,
            panControl:true,
            zoomControl:true,
            mapTypeControl:true,
            scaleControl:false,
            streetViewControl:false,
            overviewMapControl:false,
            rotateControl:true,
        };
        map = new google.maps.Map(document.getElementById("googleMap"), mapProp);

        var myTrip = [];
        $('[data-marker]').each(function () {
            var data = $(this).data('marker');

            for (var i = 0; i < data.Positions.length; i++) {
                var latlong = new google.maps.LatLng(data.Positions[i].Latitude, data.Positions[i].Longitude);
                myTrip.push(latlong);
            }

            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(data.Positions[0].Latitude, data.Positions[0].Longitude),
            });

            marker.setMap(map);

            var endTrackingDate = ToJavaScriptDate(data.FinishedTracking);
            var infowindow = new google.maps.InfoWindow({

                content: "Checkpoint: " + endTrackingDate
            });

            google.maps.event.addListener(marker, 'click', function () {
                infowindow.open(map, marker);
            });
        });

        var flightPath = new google.maps.Polyline({
            path: myTrip,
            strokeColor: "#0000FF",
            strokeOpacity: 0.8,
            strokeWeight: 2
        });
        flightPath.setMap(map);
    }

    function ToJavaScriptDate(value) {
        var pattern = /Date\(([^)]+)\)/;
        var results = pattern.exec(value);
        var dt = new Date(parseFloat(results[1]));
        return dt.getDate() + "-" + (dt.getMonth() + 1) + "-" + dt.getFullYear() + " (" + dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds() + ")";
    }

    function createNewMarkers(message) {
        var marker = new google.maps.Marker({
            position: new google.maps.LatLng(message.trackingPeriod.positions[0].latitude, message.trackingPeriod.positions[0].longitude),
            animation: google.maps.Animation.DROP
        });
        map.panTo(marker.getPosition());
        marker.setMap(map);
    }

    google.maps.event.addDomListener(window, 'load', initialize);

    var wsUri = "ws://145.93.129.99:8080/MovementSystem/socket/example-PathParameter-value";
    //var wsUri = "ws://movement.s63a.marijn.ws/socket";
    var output;
    function init() {
        output = document.getElementById("output");
        websocket = new WebSocket(wsUri);
        websocket.onopen = function (evt) {
            onOpen(evt);
        };
        websocket.onclose = function (evt) {
            onClose(evt);
        };
        websocket.onmessage = function (evt) {
            onMessage(evt);
        };
        websocket.onerror = function (evt) {
            onError(evt);
        };
    }

    //define event handlers
    function onOpen(evt) {
        writeToScreen("CONNECTED");
        var message = {cartrackerId: @Model.CarTrackerId, isStartSession: true};
        doSend(message);
    }
    function onWindowClose(evt) {
        websocket.close();
    }
    function onClose(evt) {
        writeToScreen("DISCONNECTED");
    }

    function onMessage(evt) {
        //convert json to javascript object
        var message = JSON.parse(evt.data);
        //write message.text to screen

        writeToScreen('<span style="color: green;">RECEIVED, ' + JSON.stringify(message) + ' </span>');
        if (message.trackingPeriod != null) {
            createNewMarkers(message);
        }

    }

    function doSend(message) {
        writeToScreen("SENT: " + JSON.stringify(message));
        var json = "{trackerId: " + message.cartrackerId + ", trackingPeriod:" + null + ", startSession: " + message.isStartSession+ "}";
        websocket.send(json);
    }

    function onError(event) {
        writeToScreen('<span style="color: red;">ERROR:</span> ' + event.data);
    }

    //appends text to #output
    function writeToScreen(text) {
        var pre = document.createElement("p");
        pre.style.wordWrap = "break-word";
        pre.innerHTML = text;
        output.appendChild(pre);
    }

    function startlivetracking() {
        var message = {cartrackerId: @Model.CarTrackerId, isStartSession: true};
        doSend(message);
    }

    function stoplivetracking() {
        var message = {cartrackerId: @Model.CarTrackerId, isStartSession: false};
        doSend(message);
    }

    //invoke init() on load
    window.addEventListener("load", init, false);


</script>
@using (Html.BeginForm("Map", "Car", FormMethod.Get))
{
    <div class="form-group">
        <div class="input-group">
            @Html.TextBoxFor(model => model.LicencePlate, new { @class = "form-control", autofocus = "true", required = "true", placeholder = "Search a licenceplate e.g. (44-DD-33)" })
            <span class="input-group-btn">
                <button class="btn btn-primary" type="submit">
                    <i class="fa fa-search" />
                    Find
                </button>
            </span>
        </div>
    </div>
    <div class="row">
        <div class="col-xs-12">
            <button class="btn btn-primary" onclick="startlivetracking()">Live</button>
            <br />
            <button class="btn btn-primary" onclick="stoplivetracking()">History</button>
        </div>
    </div>

    <div id="googleMap" style="width:500px;height:380px;"></div>
    @*@foreach (var trackingPeriod in Model.TrackingPeriods)
        {
            <div data-marker="@Json.Encode(trackingPeriod)"></div>
        }*@

    <div id="output" />
}
